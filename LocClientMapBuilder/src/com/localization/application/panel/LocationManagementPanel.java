/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LocationManagement.java
 *
 * Created on Dec 4, 2010, 11:23:42 PM
 */
package com.localization.application.panel;

import com.localization.application.panel.forframe.CreateLocationPanel;
import com.localization.application.LocalizationMain;
import com.localization.application.panel.forframe.DataManagementPanel;
import com.localization.manager.LocationDataManagement;
import com.localization.other.ImageHandle;
import com.localization.other.PointValidator;
import com.localization.other.TreeDataManagement;
import com.localization.other.TreeViewEvent;
import java.awt.Point;
import localization.data.entity.contentobject.LocationDataObject;

import javax.swing.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author leobin
 */
public class LocationManagementPanel extends LocalizationPanel {

    public static LocationDataObject treeRootLocation;
    private boolean isCreate = false;
    public static ArrayList<Point> listNewPoints = new ArrayList<Point>();
    public static ArrayList<LocationDataObject> listLocations = null;
    public static LocationDataObject selectedLocation;
    public static JDialog datatypeDialog;

    /** Creates new form LocationManagement */
    public LocationManagementPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneTreeContainer = new javax.swing.JScrollPane();
        treeLocation = new javax.swing.JTree();
        scrollPanelImage = new javax.swing.JScrollPane();
        imageContainer = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        buttonCreate = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();
        buttonDataManagementDialog = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonZoomOut = new javax.swing.JButton();
        buttonZoomIn = new javax.swing.JButton();
        labelZoomValue = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        labelLocationName = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(806, 525));

        paneTreeContainer.setViewportView(treeLocation);

        imageContainer.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        imageContainer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imageContainerMousePressed(evt);
            }
        });
        scrollPanelImage.setViewportView(imageContainer);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Location Management"); // NOI18N

        buttonCreate.setFont(new java.awt.Font("Tahoma", 1, 11));
        buttonCreate.setText("Create Sub-Location");
        buttonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreateActionPerformed(evt);
            }
        });

        buttonRemove.setFont(new java.awt.Font("Tahoma", 1, 11));
        buttonRemove.setText("Remove");
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        buttonDataManagementDialog.setFont(new java.awt.Font("Tahoma", 1, 11));
        buttonDataManagementDialog.setText("Data Management Dialog");
        buttonDataManagementDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDataManagementDialogActionPerformed(evt);
            }
        });

        buttonEdit.setFont(new java.awt.Font("Tahoma", 1, 11));
        buttonEdit.setText("Edit Location");
        buttonEdit.setSelected(true);
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonZoomOut.setText("-");
        buttonZoomOut.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZoomOutActionPerformed(evt);
            }
        });

        buttonZoomIn.setText("+");
        buttonZoomIn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZoomInActionPerformed(evt);
            }
        });

        labelZoomValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelZoomValue.setText("1");

        jPanel1.setMaximumSize(new java.awt.Dimension(224, 56));
        jPanel1.setMinimumSize(new java.awt.Dimension(224, 56));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Location : ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(labelLocationName, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelLocationName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paneTreeContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonDataManagementDialog, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(buttonCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonZoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelZoomValue, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addComponent(buttonZoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(buttonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(buttonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPanelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonZoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonZoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelZoomValue, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonCreate)
                            .addComponent(buttonEdit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonRemove)
                            .addComponent(buttonDataManagementDialog))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paneTreeContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPanelImage, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void buttonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreateActionPerformed
            this.isCreate = true;
            selectedLocation = null;
            this.reloadAllView();

	}//GEN-LAST:event_buttonCreateActionPerformed

	private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
            // TODO add your handling code here:
            rootLocation = selectedLocation;
            selectedLocation = null;
            this.reloadAllView();
	}//GEN-LAST:event_buttonEditActionPerformed

	private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
            // TODO add your handling code here:
            LocationDataManagement.removeLocation(selectedLocation.getLocationId());
            rootLocation.getLocations().remove(selectedLocation);
            selectedLocation = null;
            this.reloadAllView();
	}//GEN-LAST:event_buttonRemoveActionPerformed

        private void imageContainerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageContainerMousePressed
            // Mouse coordinate
            Point pressPoint = evt.getPoint();
            if (PointValidator.checkLocationContainPoint(rootLocation, pressPoint, zoomValue, true)) {
                if (this.isCreate) {
                    //pressPoint is inside another location. don't do anything
                    if (PointValidator.findLocationContainPoint(rootLocation.getLocations(), pressPoint) == null) {
                        if (listNewPoints.size() > 0 && PointValidator.isTheSamePoint(pressPoint, listNewPoints.get(0))) {
                            if (listNewPoints.size() > 1) {
                                // for a polygon the number of point should be larger than 2
                                //TODO: create new sub location
                                this.isCreate = false;
                                JDialog dialog = new JDialog(LocalizationMain.localizationMain, true);
                                CreateLocationPanel panel = new CreateLocationPanel(dialog, this, listNewPoints);
                                dialog.add(panel);
                                dialog.pack();
                                dialog.setVisible(true);

                                //reset list points

                            } else {
                                //TODO: don't do anything , should be click on another place
                                //Maybe can show an alert here
                            }
                        } else {
                            //add new point
                            listNewPoints.add(pressPoint);
                            this.reloadLocationView();
                        }
                    }
                } else {
                    //if not create then choose map on mouse
                    selectedLocation = PointValidator.findLocationContainPoint(rootLocation.getLocations(), pressPoint);
                    this.reloadAllNotTreeView();
                }
            }
        }//GEN-LAST:event_imageContainerMousePressed

        private void buttonDataManagementDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDataManagementDialogActionPerformed
            datatypeDialog = new JDialog((JFrame)(this.getParent().getParent().getParent().getParent().getParent()), true);
            DataManagementPanel panel = new DataManagementPanel(datatypeDialog);
            datatypeDialog.add(panel);
            datatypeDialog.pack();
            datatypeDialog.setVisible(true);
        }//GEN-LAST:event_buttonDataManagementDialogActionPerformed

        private void buttonZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomOutActionPerformed
            if (zoomValue > 1) {
                zoomValue--;
                this.reloadLocationView();
                this.labelZoomValue.setText(zoomValue + "");
            }
        }//GEN-LAST:event_buttonZoomOutActionPerformed

        private void buttonZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomInActionPerformed
            if (zoomValue < 20) {
                zoomValue++;
                this.reloadLocationView();
                this.labelZoomValue.setText(zoomValue + "");
            }
        }//GEN-LAST:event_buttonZoomInActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCreate;
    private javax.swing.JButton buttonDataManagementDialog;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JButton buttonZoomIn;
    private javax.swing.JButton buttonZoomOut;
    private javax.swing.JLabel imageContainer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelLocationName;
    private javax.swing.JLabel labelZoomValue;
    private javax.swing.JScrollPane paneTreeContainer;
    private javax.swing.JScrollPane scrollPanelImage;
    private javax.swing.JTree treeLocation;
    // End of variables declaration//GEN-END:variables
    public static LocationDataObject rootLocation;
    public static boolean isNeedToResetView = false;
    public static int zoomValue = 1;

    @Override
    public void reload() {
        selectedLocation = null;
        this.isCreate = false;
        zoomValue = 1;
        labelZoomValue.setText(Integer.toString(zoomValue));
        if (isNeedToResetView) {
            //update tree view
            isNeedToResetView = false;
            this.reloadAllView();
        }
    }

    /**
     * reload tree view
     */
    public void reloadTreeView() {
        this.treeLocation = new JTree(TreeDataManagement.createLocationTreeStructure(treeRootLocation));
        treeLocation.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        this.treeLocation.setVisible(true);
        this.treeLocation.addTreeSelectionListener(new TreeViewEvent(this, treeLocation));
        this.paneTreeContainer.setViewportView(this.treeLocation);

        this.updateView();
    }

    /**
     * update view
     */
    public void updateView() {
        this.invalidate();
        this.updateUI();
    }

    /**
     * reload location view
     */
    public void reloadLocationView() {
        if (rootLocation != null) {
            BufferedImage createImageForLocation = ImageHandle.createImageForLocation(rootLocation,selectedLocation, listNewPoints,zoomValue);
            ImageIcon icon = new ImageIcon(createImageForLocation);
            this.imageContainer.setIcon(icon);
            this.updateView();
        }
    }

    /**
     * reload button for state
     */
    public void reloadButton() {
        this.buttonCreate.setEnabled(!isCreate);
        this.buttonEdit.setEnabled(selectedLocation != null);
        this.buttonRemove.setEnabled(selectedLocation != null);
        this.labelLocationName.setText(selectedLocation != null ? selectedLocation.getLocationName() : "");
    }

    /**
     * reload all view
     */
    public void reloadAllView() {
        reloadAllNotTreeView();
        this.reloadTreeView();
    }

    /**
     * 
     */
    public void reloadAllNotTreeView() {
        this.reloadLocationView();
        this.reloadButton();
    }

    public void updateLocationByTree(LocationDataObject location) {
        if (location.getParentLocation() == null) {
            rootLocation = location;
            selectedLocation = null;
            this.reloadLocationView();
            this.reloadButton();
        } else {
            selectedLocation = location;
            rootLocation = location.getParentLocation();
            this.reloadLocationView();
            this.reloadButton();
        }
    }

}
