/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package locationaware.wifi;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * scanPointWifi() is currently used
 * @author Xuan Nam
 */
public class WifiScanner {

    /**
     * Qu√©t t√≠n hi·ªáu v·ªõi kho·∫£ng th·ª?i gian ngh·ªâ gi·ªØa 2 l·∫ßn qu√©t,
     * n·∫øu qu√©t m√† kh√¥ng c√≥ d·ªØ li·ªáu th√¨ s·∫Ω th·ª≠ l·∫°i, s·ªë l·∫ßn th·ª≠ l√† max
     * @param sleepTime
     * @param max s·ªë l·∫ßn qu√©t l·∫°i t·ªëi ƒëa khi kh√¥ng ph√°t hi·ªán t√≠n hi·ªáu
     * @return ScanningPoint
     */
    public static ScanningPoint scanPointWifi(int sleepTime, int max) {
        int maxcount = max; // S·ªë l·∫ßn qu√©t t·ªëi ƒëa ƒë·∫øn khi ph√°t hi·ªán ƒë∆∞·ª£c t√≠n hi·ªáu, n·∫øu qu√° s·ªë l·∫ßn n√†y m√† kh√¥ng c√≥ t√≠n hi·ªáu th√¨ return null
        int count = 0;

        while (true && count <= maxcount) {
            count++;
            ScanningPoint sp = scan();
            if (sp != null) {
                return sp;
            }
            try {
                Thread.sleep(sleepTime);
            } catch (InterruptedException ex) {
                Logger.getLogger(WifiScanner.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return null;

    }

    /**
     * Qu√©t t√≠n hi·ªáu m√† kh√¥ng c·∫ßn kho·∫£ng th·ª?i gian ngh·ªâ gi·ªØa 2 l·∫ßn qu√©t,
     * c√≥ qu√©t l·∫°i n·∫øu kh√¥ng t√¨m th·∫•y t√≠n hi·ªáu v√†o l·∫ßn qu√©t ƒë·∫ßu,
     * s·ªë l·∫ßn qu√©t l·∫°i l√† max l·∫ßn
     * @param wa
     * @param max s·ªë l·∫ßn qu√©t l·∫°i t·ªëi ƒëa khi kh√¥ng ph√°t hi·ªán t√≠n hi·ªáu
     * @return ScanningPoint
     */
    public static ScanningPoint scanPointWifi(int max) {
        int maxcount = max;
        int count = 0;

        while (true && count <= maxcount) {
            count++;
            ScanningPoint sp = scan();
            if (sp != null) {
                return sp;
            }

        }
        return null;

    }

    /**
     * Qu√©t list wifi
     * @param s
     * @param numOfScan

     * @return ArrayList<ScanningPoint>
     */
    public static ArrayList<ScanningPoint> scanListPointWifi(int numOfScan) {
        ArrayList<ScanningPoint> list = new ArrayList<ScanningPoint>();
        for (int i = 0; i < numOfScan; i++) {
            ScanningPoint p = scanPointWifi(3);
            list.add(p);
        }
        return list;
    }

    /**
     * Currently in used now
     * @param s
     * @return ScanningPoint
     */
    public static ScanningPoint scanPointWifi() {
        ScanningPoint sp = scan();
        return sp;

    }

    /**
     * Qu√©t s√≥ng wifi (t·ª± ƒë·ªông detect OS (XP, Vista, Windows 7)
     * @param s
     * @return ScanningPoint n·∫øu scan ƒë∆∞·ª£c d·ªØ hi·ªáu ho·∫∑c null n·∫øu kh√¥ng scan ƒë∆∞·ª£c d·ªØ li·ªáu n√†o.
     */
    static OSDetector osIndependent=new OSDetector();
    
    private static ScanningPoint scan() {
        ScanningPoint sp = osIndependent.scan();
        return sp;
    }

    public static long getScannerMac() {
    	long macAdd = osIndependent.getScannerMAC();
    	return macAdd;
    }

}
