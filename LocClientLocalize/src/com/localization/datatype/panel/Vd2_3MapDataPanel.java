/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Vd2_3MapDataPanel.java
 *
 * Created on Feb 21, 2011, 12:41:03 AM
 */

package com.localization.datatype.panel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.TreeMap;

import javax.swing.Timer;

import localization.data.entity.contentobject.DataTypeDataObject;
import locationaware.client.ClientMapDataSender;
import locationaware.clientserver.MapData;
import locationaware.wifi.mapdata.Vd2_3MapData;
import locationaware.wifi.mapdata.WifiMapData;
import locationaware.wifi.utilities.LocationWifiDataCollector;

import com.localization.application.StartCaliratePanel;
import com.localization.manager.DataTypeDataManagement;
import com.localization.other.ApplicationConfiguration;
import com.localization.server.CommonConfig;

/**
 *
 * @author Dinh
 */
public class Vd2_3MapDataPanel extends DataTypeAbstractPanel implements ActionListener{

    private LocationWifiDataCollector collector = new LocationWifiDataCollector();
    private javax.swing.Timer timer;
    private int elapseTime;
    private boolean isScan = false;

    public static TreeMap<String, DataTypeDataObject> mapAllDTO = getMapDataType();

    private static TreeMap<String, DataTypeDataObject> getMapDataType() {
        TreeMap<String, DataTypeDataObject> mapDatatype = new TreeMap<String, DataTypeDataObject>();
        ArrayList<DataTypeDataObject> listAllDTO = DataTypeDataManagement.getAllDataType();

        for (DataTypeDataObject dataObject : listAllDTO) {
            mapDatatype.put(dataObject.getDataTypeClassName(), dataObject);
        }

        return mapDatatype;
    }


    /** Creates new form Vd2_3MapDataPanel */
    public Vd2_3MapDataPanel() {
        initComponents();
        initOtherComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        startScanJButton = new javax.swing.JButton();
        endScanJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nospJLabel = new javax.swing.JLabel();
        elapsedTimeJLabel = new javax.swing.JLabel();
        inputScanningTime = new javax.swing.JTextField();
        inputNumberOfScanningPoint = new javax.swing.JTextField();
        inputScanningFrequency = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Scanning Time");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Number of scanning point");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Scanning frequency");

        startScanJButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        startScanJButton.setText("Start Scan");
        startScanJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startScanJButtonActionPerformed(evt);
            }
        });

        endScanJButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        endScanJButton.setText("End Scan");
        endScanJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endScanJButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("NOSP:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Elapsed time:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputNumberOfScanningPoint, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(inputScanningFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(inputScanningTime)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startScanJButton)
                        .addGap(18, 18, 18)
                        .addComponent(endScanJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nospJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(elapsedTimeJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(151, 151, 151))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputScanningTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputNumberOfScanningPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inputScanningFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startScanJButton)
                    .addComponent(endScanJButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nospJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(elapsedTimeJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startScanJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startScanJButtonActionPerformed
                this.isScan = true;
                this.reloadButton();

                try {
                    collector.setMinNumberOfSPs(Integer.parseInt(this.inputNumberOfScanningPoint.getText()));
                    collector.setMinTimeInSecond(Integer.parseInt(this.inputScanningTime.getText()));

                    boolean isAppend = false;    
                    collector.startCollecting(null, StartCaliratePanel.getSelectedLocation().getLocationId(), StartCaliratePanel.getSelectedLocation().getUser().getUserId(), isAppend, Double.parseDouble(this.inputScanningFrequency.getText()));
                    elapseTime = 0;
                    timer.start();
                } catch (Exception e) {
                    System.err.println(e.toString());
                }

    }//GEN-LAST:event_startScanJButtonActionPerformed

    private void endScanJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endScanJButtonActionPerformed
                this.isScan = false;
                this.reloadButton();

                timer.stop();
                elapseTime = 0;
                collector.stopCollecting();

                Vd2_3MapData vd2_3MapData = Vd2_3MapData.createVd2_3MapData(collector.getWifiMapData());
//                DataTypeDataObject datatype = StartCaliratePanel.getTreeRootLocation().getAlgorithm().getDataType();
//                String saveFilePath = ApplicationConfiguration.load().dataFolder + "/" + StartCaliratePanel.getSelectedLocation().getLocationId() + "_" + StartCaliratePanel.getSelectedLocation().getUser().getUserId() + "_" + datatype.getDataTypeId() + CommonConfig.extensionMapDataFile;
//                MapData.writeMapData(vd2_3MapData, saveFilePath);

                String saveFilePath = ApplicationConfiguration.load().dataFolder + "/" + StartCaliratePanel.getSelectedLocation().getLocationId() + "_" + StartCaliratePanel.getSelectedLocation().getUser().getUserId() + "_" + mapAllDTO.get(Vd2_3MapData.DATATYPE_CLASSNAME).getDataTypeId() + CommonConfig.extensionMapDataFile;
                MapData.writeMapData(vd2_3MapData, saveFilePath);

                saveFilePath = ApplicationConfiguration.load().dataFolder + "/" + StartCaliratePanel.getSelectedLocation().getLocationId() + "_" + StartCaliratePanel.getSelectedLocation().getUser().getUserId() + "_" + mapAllDTO.get(WifiMapData.class.getName()).getDataTypeId() + CommonConfig.extensionMapDataFile;
                MapData.writeMapData(collector.getWifiMapData(), saveFilePath);


                if (ApplicationConfiguration.load().isAutoUpload) {
                    ClientMapDataSender sender = new ClientMapDataSender();

                    sender.setPort(ApplicationConfiguration.load().submitDataPort);
                    sender.setServerHost(ApplicationConfiguration.load().serverHost);
                    sender.sendMapData(vd2_3MapData);
                }

    }//GEN-LAST:event_endScanJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel elapsedTimeJLabel;
    private javax.swing.JButton endScanJButton;
    private javax.swing.JTextField inputNumberOfScanningPoint;
    private javax.swing.JTextField inputScanningFrequency;
    private javax.swing.JTextField inputScanningTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel nospJLabel;
    private javax.swing.JButton startScanJButton;
    // End of variables declaration//GEN-END:variables

    private void initOtherComponents() {
        timer = new Timer(1000, this);
        timer.setRepeats(true);
        reloadButton();
        elapseTime = 0;
        inputScanningTime.setText("" + ApplicationConfiguration.load().scanningTime);
        inputScanningFrequency.setText("" + ApplicationConfiguration.load().scanningFrequency);
        inputNumberOfScanningPoint.setText("" + ApplicationConfiguration.load().numberOfScanningPoint);
    }

    public void actionPerformed(ActionEvent e) {
        if (collector.isActive()) {
            this.nospJLabel.setText("" + collector.getNumberOfSPs());
            this.elapsedTimeJLabel.setText("" + (++elapseTime));
        } else {
            this.isScan = false;
            this.reloadButton();
            timer.stop();
            elapseTime = 0;

                            
            Vd2_3MapData vd2_3MapData = Vd2_3MapData.createVd2_3MapData(collector.getWifiMapData());
//            DataTypeDataObject datatype = StartCaliratePanel.getTreeRootLocation().getAlgorithm().getDataType();
//            String saveFilePath = ApplicationConfiguration.load().dataFolder + "/" + StartCaliratePanel.getSelectedLocation().getLocationId() + "_" + StartCaliratePanel.getSelectedLocation().getUser().getUserId() + "_" + datatype.getDataTypeId() + CommonConfig.extensionMapDataFile;
//            MapData.writeMapData(vd2_3MapData, saveFilePath);

            String saveFilePath = ApplicationConfiguration.load().dataFolder + "/" + StartCaliratePanel.getSelectedLocation().getLocationId() + "_" + StartCaliratePanel.getSelectedLocation().getUser().getUserId() + "_" + mapAllDTO.get(Vd2_3MapData.DATATYPE_CLASSNAME).getDataTypeId() + CommonConfig.extensionMapDataFile;
            MapData.writeMapData(vd2_3MapData, saveFilePath);

            saveFilePath = ApplicationConfiguration.load().dataFolder + "/" + StartCaliratePanel.getSelectedLocation().getLocationId() + "_" + StartCaliratePanel.getSelectedLocation().getUser().getUserId() + "_" + mapAllDTO.get(WifiMapData.class.getName()).getDataTypeId() + CommonConfig.extensionMapDataFile;
            MapData.writeMapData(collector.getWifiMapData(), saveFilePath);


            if (ApplicationConfiguration.load().isAutoUpload) {
                ClientMapDataSender sender = new ClientMapDataSender();

                sender.setPort(ApplicationConfiguration.load().submitDataPort);
                sender.setServerHost(ApplicationConfiguration.load().serverHost);
                sender.sendMapData(Vd2_3MapData.createVd2_3MapData(collector.getWifiMapData()));
            }
        }

    }

    private void reloadButton() {
        this.startScanJButton.setEnabled(!isScan);
        this.endScanJButton.setEnabled(isScan);
    }

}
