/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CeleratePanel.java
 *
 * Created on Apr 17, 2011, 5:07:31 PM
 */
package com.localization.application;

import java.io.File;
import java.util.ArrayList;

import javax.swing.JDialog;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

import localization.data.entity.contentobject.LocationDataObject;
import locationaware.client.ClientCalibration;
import locationaware.clientserver.MapData;
import locationaware.wifi.mapdata.Vd2_3MapData;

import com.localization.application.panel.item.LocationPanel;
import com.localization.datatype.panel.Vd2_3MapDataPanel;
import com.localization.manager.LocationDataManagement;
import com.localization.other.ApplicationConfiguration;
import com.localization.other.TreeDataManagement;
import com.localization.server.CommonConfig;

/**
 *
 * @author leobin
 */
public class CaliratePanel extends javax.swing.JPanel {

    private final JDialog parentDialog;
    private ArrayList<LocationDataObject> allRootLocation;
    private final LocationDataObject treeRootLocation;
    private JDialog datatypeDialog;
    private ArrayList<LocationDataObject> listAddedLocation;

    CaliratePanel(JDialog dialog, LocationDataObject treeRootLocation) {
        this.parentDialog = dialog;
        this.treeRootLocation = treeRootLocation;
        this.listAddedLocation = new ArrayList<LocationDataObject>();
        initComponents();
        intiOtherComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTreeContainer = new javax.swing.JScrollPane();
        treeLocation = new javax.swing.JTree();
        BuildMapJButton = new javax.swing.JButton();
        canceljButton = new javax.swing.JButton();
        calibrateJButton = new javax.swing.JButton();
        panelListLocationContainer = new javax.swing.JScrollPane();
        panelListLocation = new javax.swing.JPanel();
        calibrateStatusjLabel = new javax.swing.JLabel();

        panelTreeContainer.setViewportView(treeLocation);

        BuildMapJButton.setText("Build Map");
        BuildMapJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildMapJButtonActionPerformed(evt);
            }
        });

        canceljButton.setText("Cancel");
        canceljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canceljButtonActionPerformed(evt);
            }
        });

        calibrateJButton.setText("Calibrate");
        calibrateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calibrateJButtonActionPerformed(evt);
            }
        });

        panelListLocation.setLayout(new javax.swing.BoxLayout(panelListLocation, javax.swing.BoxLayout.PAGE_AXIS));
        panelListLocationContainer.setViewportView(panelListLocation);

        calibrateStatusjLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        calibrateStatusjLabel.setText("Calibration result");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelTreeContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(calibrateJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BuildMapJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(canceljButton, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(calibrateStatusjLabel)
                        .addContainerGap())))
            .addComponent(panelListLocationContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTreeContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BuildMapJButton)
                            .addComponent(canceljButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calibrateJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(calibrateStatusjLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelListLocationContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void canceljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canceljButtonActionPerformed
        // TODO add your handling code here:
        this.parentDialog.dispose();
    }//GEN-LAST:event_canceljButtonActionPerformed

    private void BuildMapJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildMapJButtonActionPerformed
        datatypeDialog = new JDialog(this.parentDialog, true);
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeLocation.getLastSelectedPathComponent();
        //sample data
//        LocationDataObject newLocation = new LocationDataObject();
//        newLocation.setLocationName("Test location " + Integer.toString(listAddedLocation.size()));

        StartCaliratePanel panel = new StartCaliratePanel(datatypeDialog, this, (LocationDataObject) node.getUserObject());
//        StartCaliratePanel panel = new StartCaliratePanel(datatypeDialog, this, newLocation);
        datatypeDialog.add(panel);
        datatypeDialog.pack();
        datatypeDialog.setVisible(true);
    }//GEN-LAST:event_BuildMapJButtonActionPerformed

    private void calibrateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibrateJButtonActionPerformed
        // TODO add your handling code here:
        ArrayList<Vd2_3MapData> listMapData = new ArrayList<Vd2_3MapData>();

        for (LocationDataObject selectedLocation : listAddedLocation) {
            String fileMapDataPath = ApplicationConfiguration.load().dataFolder + "/" + selectedLocation.getLocationId() + "_" + selectedLocation.getUser().getUserId() + "_" + Vd2_3MapDataPanel.mapAllDTO.get(Vd2_3MapData.DATATYPE_CLASSNAME).getDataTypeId() + CommonConfig.extensionMapDataFile;
            File fileMapData = new File(fileMapDataPath);

            if (fileMapData.exists()) {
                MapData mapData = MapData.readMapData(fileMapDataPath);
                listMapData.add((Vd2_3MapData) mapData);
            }
        }

        if (!listMapData.isEmpty()) {
            ClientCalibration caliration = new ClientCalibration();
            caliration.setServerHost(ApplicationConfiguration.load().serverHost);
            caliration.setPort(ApplicationConfiguration.load().localizePort);

            if (caliration.calirate(listMapData)) {
                calibrateStatusjLabel.setVisible(true);
                calibrateStatusjLabel.setText("Calibration success");
            } else {
                calibrateStatusjLabel.setVisible(true);
                calibrateStatusjLabel.setText("Failed to calibrate");
            }
        } else {
            calibrateStatusjLabel.setVisible(true);
            calibrateStatusjLabel.setText("Failed to calibrate because data folder didn't exist");
        }

    }//GEN-LAST:event_calibrateJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuildMapJButton;
    private javax.swing.JButton calibrateJButton;
    private javax.swing.JLabel calibrateStatusjLabel;
    private javax.swing.JButton canceljButton;
    private javax.swing.JPanel panelListLocation;
    private javax.swing.JScrollPane panelListLocationContainer;
    private javax.swing.JScrollPane panelTreeContainer;
    private javax.swing.JTree treeLocation;
    // End of variables declaration//GEN-END:variables

    private void intiOtherComponents() {
        reloadTreeView();
    }

    public void reloadTreeView() {
        if (this.treeRootLocation != null) {
            this.treeLocation = new JTree(TreeDataManagement.createLocationTreeStructure(treeRootLocation));
        } else {
            this.allRootLocation = LocationDataManagement.getAllRootLocation();
            this.treeLocation = new JTree(TreeDataManagement.createListLocationTreeStructure(this.allRootLocation));
        }
        treeLocation.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        this.treeLocation.setVisible(true);
        //set event listener for tree change value
        //this.treeLocation.addTreeSelectionListener(new TreeViewEventForCelerate(this, treeLocation));
        this.panelTreeContainer.setViewportView(this.treeLocation);

        this.updateView();
    }

    /**
     * update view
     */
    public void updateView() {
        panelListLocationContainer.updateUI();
        panelListLocation.updateUI();
        this.updateUI();
        this.invalidate();
    }

    public void reload() {
        //List<LocationDataObject> allRootLocation = LocalizationMain.loginUser.getLocations();
        System.out.println(panelListLocation.getComponents().length);
        System.out.println(listAddedLocation.size());
        if (panelListLocation.getComponents().length < listAddedLocation.size()) {
            for (int j = panelListLocation.getComponents().length; j < listAddedLocation.size(); j++) {
                LocationDataObject location = listAddedLocation.get(j);
                LocationPanel locationPanel = new LocationPanel(location, this);
                locationPanel.setVisible(true);
                panelListLocation.add(locationPanel);
            }
        } else {
            if (panelListLocation.getComponents().length > listAddedLocation.size()) {
                for (int j = 0; j < panelListLocation.getComponents().length; j++) {
                    LocationPanel locationPanel = (LocationPanel) panelListLocation.getComponent(j);
                    if (locationPanel.isRemove) {
                        panelListLocation.remove(j);
                    }
                }
            }
        }
        updateView();
    }

    public void addNewLocation() {
       DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeLocation.getLastSelectedPathComponent();
       LocationDataObject newLocation = (LocationDataObject) node.getUserObject();

        //sample data
//        LocationDataObject newLocation = new LocationDataObject();
//        newLocation.setLocationName("Test location " + Integer.toString(listAddedLocation.size()));
//        newLocation.setLocationId(Integer.toString(listAddedLocation.size()));
        if (!listAddedLocation.contains(newLocation)) {
            listAddedLocation.add(newLocation);
            this.reload();
        }
    }

    public void removeLocation(LocationDataObject location) {
        listAddedLocation.remove(location);
        this.reload();
    }
}
