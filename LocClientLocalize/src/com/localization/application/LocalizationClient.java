/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LocalizationClient.java
 *
 * Created on Feb 22, 2011, 2:45:13 PM
 */
package com.localization.application;

import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JTree;
import javax.swing.tree.TreeSelectionModel;

import localization.data.entity.contentobject.LocationDataObject;
import locationaware.client.ClientLocationWifiDetector;
import locationaware.clientserver.Location;
import locationaware.eventlistener.NewResultComingEventListener;
import locationaware.eventlistener.NewWifiSPEventListener;
import locationaware.myevent.NewResultComingEvent;
import locationaware.myevent.NewWifiSPEvent;
import locationaware.wifi.ScanningPoint;
import locationaware.wifi.debug.TestingFile;

import com.localization.other.ApplicationConfiguration;
import com.localization.other.ImageHandle;
import com.localization.other.PointValidator;
import com.localization.other.TreeDataManagement;
import com.localization.other.TreeViewEvent;
import com.localization.server.ServerAPI;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author leobin
 */
public class LocalizationClient extends javax.swing.JFrame {

    /** Creates new form LocalizationClient */
    public LocalizationClient() {
        initComponents();
        initOtherComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTreeContainer = new javax.swing.JScrollPane();
        treeLocation = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        imageContainer = new javax.swing.JLabel();
        labelZoomValue = new javax.swing.JLabel();
        buttonZoomOut = new javax.swing.JButton();
        buttonZoomIn = new javax.swing.JButton();
        buttonStart = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        locationNameJLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rootLocationJLabel = new javax.swing.JLabel();
        rootLocationjComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        userJLabel = new javax.swing.JLabel();
        notCaliratedjLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        startCalibrateJButton = new javax.swing.JButton();
        convertjCheckBox = new javax.swing.JCheckBox();
        resultListenerjLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        frequencyjSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        enableTestingjCheckBox = new javax.swing.JCheckBox();
        selectTestLocationjButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        testLocationRootjLabel = new javax.swing.JLabel();
        testLocationNamejLabel = new javax.swing.JLabel();
        testLocationUserjLabel = new javax.swing.JLabel();
        remainingTimejLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        testingTimejSpinner = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelTreeContainer.setViewportView(treeLocation);

        imageContainer.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        imageContainer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imageContainerMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(imageContainer);

        labelZoomValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelZoomValue.setText("1");

        buttonZoomOut.setText("-");
        buttonZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZoomOutActionPerformed(evt);
            }
        });

        buttonZoomIn.setText("+");
        buttonZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZoomInActionPerformed(evt);
            }
        });

        buttonStart.setText("Start Localize");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        jLabel2.setText("Location:");

        locationNameJLabel.setText("locationName");

        jLabel4.setText("Root:");

        rootLocationJLabel.setText("rootLocation");

        rootLocationjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new Location[] {}));
        rootLocationjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootLocationjComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("User:");

        userJLabel.setText("user");

        notCaliratedjLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        notCaliratedjLabel.setText("You haven't calirated this root location yet");
        notCaliratedjLabel.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(userJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                                .addComponent(notCaliratedjLabel))
                            .addComponent(locationNameJLabel)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rootLocationjComboBox, 0, 319, Short.MAX_VALUE)
                            .addComponent(rootLocationJLabel))))
                .addGap(114, 114, 114))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(rootLocationJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rootLocationjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(locationNameJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(userJLabel)
                    .addComponent(notCaliratedjLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Localization Client");

        startCalibrateJButton.setText("Calibration");
        startCalibrateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startCalibrateJButtonActionPerformed(evt);
            }
        });

        convertjCheckBox.setSelected(true);
        convertjCheckBox.setText("Convert");

        resultListenerjLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        resultListenerjLabel.setText("Waiting for new result ...");
        resultListenerjLabel.setVisible(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("Frequency: ");

        frequencyjSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.5d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel6.setText("TESTING");

        enableTestingjCheckBox.setSelected(true);
        enableTestingjCheckBox.setText("Enable");

        selectTestLocationjButton.setText("Select Location");
        selectTestLocationjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTestLocationjButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Location:");

        jLabel8.setText("User:");

        jLabel9.setText("Root:");

        testLocationRootjLabel.setText("rootLocation");

        testLocationNamejLabel.setText("locationName");

        testLocationUserjLabel.setText("user");

        remainingTimejLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        remainingTimejLabel.setText("Remaining time:");

        jLabel11.setText("Testing time:");

        testingTimejSpinner.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(120L), Long.valueOf(0L), null, Long.valueOf(10L)));

        jLabel12.setText("s");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(startCalibrateJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                .addGap(39, 39, 39)
                                .addComponent(convertjCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(frequencyjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(375, 375, 375))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(selectTestLocationjButton)
                                            .addComponent(enableTestingjCheckBox))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(testLocationUserjLabel)
                                            .addComponent(testLocationNamejLabel)
                                            .addComponent(testLocationRootjLabel)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(testingTimejSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(remainingTimejLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonZoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(labelZoomValue, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(buttonZoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(resultListenerjLabel)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelTreeContainer, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE))
                .addGap(103, 103, 103))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonZoomOut)
                            .addComponent(labelZoomValue)
                            .addComponent(buttonZoomIn)
                            .addComponent(buttonStart)
                            .addComponent(resultListenerjLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remainingTimejLabel)
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startCalibrateJButton)
                            .addComponent(convertjCheckBox)
                            .addComponent(jLabel5)
                            .addComponent(frequencyjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enableTestingjCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectTestLocationjButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(testLocationRootjLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(testLocationNamejLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(testLocationUserjLabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(testingTimejSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelTreeContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomOutActionPerformed
        if (zoomValue > 1) {
            zoomValue--;
            this.reloadLocationView();
            this.labelZoomValue.setText(zoomValue + "");
        }
    }//GEN-LAST:event_buttonZoomOutActionPerformed

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        //example to change form
        if (detector.isActive()) {
            timerTask.cancel();
            detector.stopDectectLocation();
            buttonStart.setVisible(false);

            new Thread(new Runnable() {

                public void run() {
                    remainingTimejLabel.setText("Waiting for threads to finish ...");

//                    while (detector.isActive()) {
//                        try {
//                            Thread.sleep(1000);
//                        } catch (InterruptedException ex) {
//                            Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }

                    remainingTimejLabel.setText("Threads have already finished ...");
                    buttonStart.setText("Start localize");
                    buttonStart.setVisible(true);

                    resultListenerjLabel.setVisible(false);
                    notCaliratedjLabel.setVisible(false);

                    if (enableTestingjCheckBox.isSelected()) {
                        TestingFile test = new TestingFile();
                        test.frequency = (Double) frequencyjSpinner.getValue();
                        test.isConvert = convertjCheckBox.isSelected();
                        test.selectTestLocation = selectTestLocation;
                        test.listResult = listResult;
                        test.listScanningPoint = listScanningPoint;

                        if (test.selectTestLocation != null) {
                            TestingFile.writeTestfile(test, ApplicationConfiguration.load().dataFolder + "/" + test.selectTestLocation.getLocationId() + "_" + test.isConvert + "_" + test.frequency + ".testfile");
                        }
                    }
                }
            }).start();

            newDetector();
        } else {
            iCounter = 0;
            testingTime = ((Long) testingTimejSpinner.getValue()).longValue();
            timerTask = new TimerTask() {

                @Override
                public void run() {
                    remainingTimejLabel.setText("Remaining time: " + testingTime + " s");
                    testingTime--;
                    if (testingTime < 0) {
                        this.cancel();
                        detector.stopDectectLocation();
                        buttonStart.setVisible(false);

                        remainingTimejLabel.setText("Waiting for threads to finish ...");

//                        while (detector.isActive()) {
//                            try {
//                                Thread.sleep(1000);
//                            } catch (InterruptedException ex) {
//                                Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                        }

                        remainingTimejLabel.setText("Threads have already finished ...");
                        buttonStart.setText("Start localize");
                        buttonStart.setVisible(true);

                        resultListenerjLabel.setVisible(false);
                        notCaliratedjLabel.setVisible(false);

                        if (enableTestingjCheckBox.isSelected()) {
                            TestingFile test = new TestingFile();
                            test.frequency = (Double) frequencyjSpinner.getValue();
                            test.isConvert = convertjCheckBox.isSelected();
                            test.selectTestLocation = selectTestLocation;
                            test.listResult = listResult;
                            test.listScanningPoint = listScanningPoint;

                            if (test.selectTestLocation != null) {
                                TestingFile.writeTestfile(test, ApplicationConfiguration.load().dataFolder + "/" + test.selectTestLocation.getLocationId() + "_" + test.isConvert + "_" + test.frequency + ".testfile");
                            }
                        }

                        newDetector();
                    }
                }
            };
            timer.schedule(timerTask, 0, 1000);

            buttonStart.setText("End localize");
            detector.setFrequency((Double) frequencyjSpinner.getValue());
            detector.setServerHost(ApplicationConfiguration.load().serverHost);
            detector.setPort(ApplicationConfiguration.load().localizePort);
            detector.setDetectAtClient(false);
            detector.setConvert(convertjCheckBox.isSelected());
            detector.setConfidence(90);
            if (!detector.startDetectLocation()) {
                buttonStart.setText("Start localize");
                detector.stopDectectLocation();
            } else {
                detector.getScanningThread().addNewWifiSPEventListener(new NewWifiSPEventListener() {

                    public void handleEvent(NewWifiSPEvent evt) {
                        Object object = evt.getSource();

                        if (object instanceof ScanningPoint) {
                            ScanningPoint scanningPoint = (ScanningPoint) evt.getSource();
                            listScanningPoint.add(scanningPoint);
                        }
                    }
                });

                resultListenerjLabel.setText("Waiting for new result ...");
                resultListenerjLabel.setVisible(true);
                if (enableTestingjCheckBox.isSelected()) {
                    listResult.clear();
                    listScanningPoint.clear();
                }
            }

        }

    }//GEN-LAST:event_buttonStartActionPerformed

    private void buttonZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomInActionPerformed
        if (zoomValue < 20) {
            zoomValue++;
            this.reloadLocationView();
            this.labelZoomValue.setText(zoomValue + "");
        }
    }//GEN-LAST:event_buttonZoomInActionPerformed

    private void imageContainerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageContainerMousePressed
        Point pressPoint = evt.getPoint();
        if (PointValidator.checkLocationContainPoint(rootLocation, pressPoint, zoomValue, true)) {
            //if not create then choose map on mouse
            selectedLocation = PointValidator.findLocationContainPoint(rootLocation.getLocations(), pressPoint);
            this.reloadAllNotTreeView();
        }
    }//GEN-LAST:event_imageContainerMousePressed

    private void startCalibrateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startCalibrateJButtonActionPerformed
        JDialog dialog = new JDialog(this, true);
//        treeRootLocation = serverAPI.searchLocationByLocationId(((Location) rootLocationjComboBox.getSelectedItem()).getLocationId());
        CaliratePanel panel = new CaliratePanel(dialog, treeRootLocation);
        dialog.add(panel);
        dialog.pack();
        dialog.setVisible(true);
    }//GEN-LAST:event_startCalibrateJButtonActionPerformed

    private void rootLocationjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootLocationjComboBoxActionPerformed
        Location selectedRootLocation = (Location) rootLocationjComboBox.getSelectedItem();

        if (selectedRootLocation != null) {
            int size = detector.getListDetectedLocation().get(selectedRootLocation).size();
            if (detector.getListDetectedLocation().get(selectedRootLocation).get(size - 1) == null) {
                notCaliratedjLabel.setVisible(true);
            } else {
                notCaliratedjLabel.setVisible(false);
            }

            Location selectedLocation = detector.getListDetectedLocation().get(selectedRootLocation).get(0);
            //selectedLocation = serverAPI.searchLocationByLocationId(selectedLocationId);
            //rootLocation = selectedLocation.getParentLocation();
            locationNameJLabel.setText(selectedLocation.getLocationName());
            rootLocationJLabel.setText(selectedRootLocation.getLocationName());
            userJLabel.setText(selectedLocation.getUserName());
            System.out.println(selectedLocation.getUserName());
            //at here need to save root location. If the root location is not change only not cnhange only need to readloadLocationView
            //reloadAllView();

        }

    }//GEN-LAST:event_rootLocationjComboBoxActionPerformed

    private void selectTestLocationjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTestLocationjButtonActionPerformed
        JDialog dialog = new JDialog(this, true);
        SelectTestLocationPanel panel = SelectTestLocationPanel.createInstance(dialog, rootTestingLocation);
        dialog.add(panel);
        dialog.pack();
        dialog.setVisible(true);
    }//GEN-LAST:event_selectTestLocationjButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LocalizationClient().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStart;
    private javax.swing.JButton buttonZoomIn;
    private javax.swing.JButton buttonZoomOut;
    private javax.swing.JCheckBox convertjCheckBox;
    private javax.swing.JCheckBox enableTestingjCheckBox;
    private javax.swing.JSpinner frequencyjSpinner;
    private javax.swing.JLabel imageContainer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelZoomValue;
    private javax.swing.JLabel locationNameJLabel;
    private javax.swing.JLabel notCaliratedjLabel;
    private javax.swing.JScrollPane panelTreeContainer;
    private javax.swing.JLabel remainingTimejLabel;
    private javax.swing.JLabel resultListenerjLabel;
    private javax.swing.JLabel rootLocationJLabel;
    private javax.swing.JComboBox rootLocationjComboBox;
    private javax.swing.JButton selectTestLocationjButton;
    private javax.swing.JButton startCalibrateJButton;
    public static javax.swing.JLabel testLocationNamejLabel;
    public static javax.swing.JLabel testLocationRootjLabel;
    public static javax.swing.JLabel testLocationUserjLabel;
    private javax.swing.JSpinner testingTimejSpinner;
    private javax.swing.JTree treeLocation;
    private javax.swing.JLabel userJLabel;
    // End of variables declaration//GEN-END:variables
    //start location decalaration
    //rootlocation is the location show on locationview(the image)
    public static LocationDataObject rootLocation;
    //treeRootLocation(is the root location of this map)
    public static LocationDataObject treeRootLocation;
    public static boolean isNeedToResetView = false;
    public static int zoomValue = 1;
    public static ArrayList<LocationDataObject> listLocations = null;
    public static LocationDataObject selectedLocation;
    ClientLocationWifiDetector detector = new ClientLocationWifiDetector();
    ServerAPI serverAPI = new ServerAPI();
    int iCounter;
    public static LocationDataObject selectTestLocation = null;
    public static LocationDataObject rootTestingLocation;
    private ArrayList<TreeMap<Location, ArrayList<Location>>> listResult = new ArrayList<TreeMap<Location, ArrayList<Location>>>();
    private ArrayList<ScanningPoint> listScanningPoint = new ArrayList<ScanningPoint>();
    private Timer timer;
    private TimerTask timerTask;
    private long testingTime;

    public void reload() {
        selectedLocation = null;
        zoomValue = 1;
        labelZoomValue.setText(Integer.toString(zoomValue));
        if (isNeedToResetView) {
            //update tree view
            isNeedToResetView = false;
            this.reloadAllView();
        }
    }

    /**
     * reload tree view
     */
    public void reloadTreeView() {
        this.treeLocation = new JTree(TreeDataManagement.createLocationTreeStructure(treeRootLocation));
        treeLocation.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        this.treeLocation.setVisible(true);
        this.treeLocation.addTreeSelectionListener(new TreeViewEvent(this, treeLocation));
        this.panelTreeContainer.setViewportView(this.treeLocation);

        this.updateView();
    }

    /**
     * update view
     */
    public void updateView() {
        this.invalidate();
    }

    /**
     * reload location view
     */
    public void reloadLocationView() {
        if (rootLocation != null) {
            BufferedImage createImageForLocation = ImageHandle.createImageForLocation(rootLocation, selectedLocation, null, zoomValue);
            ImageIcon icon = new ImageIcon(createImageForLocation);
            this.imageContainer.setIcon(icon);
            this.updateView();
        }
    }

    /**
     * reload button for state
     */
    public void reloadButton() {
    }

    /**
     * reload all view
     */
    public void reloadAllView() {
        reloadAllNotTreeView();
        this.reloadTreeView();
    }

    /**
     *
     */
    public void reloadAllNotTreeView() {
        this.reloadLocationView();
        this.reloadButton();
    }

    public void updateLocationByTree(LocationDataObject location) {
        if (location.getParentLocation() == null) {
            rootLocation = location;
            selectedLocation = null;
            this.reloadLocationView();
            this.reloadButton();
        } else {
            selectedLocation = location;
            rootLocation = location.getParentLocation();
            this.reloadLocationView();
            this.reloadButton();
        }
    }

    private void initOtherComponents() {

        File fileInput = new File("nhu.location");

        if (fileInput.exists()) {
            FileInputStream fileInputStream = null;
            try {
                fileInputStream = new FileInputStream(fileInput);
                BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
                ObjectInputStream objectInputStream;
                objectInputStream = new ObjectInputStream(bufferedInputStream);
                rootTestingLocation = (LocationDataObject) objectInputStream.readObject();
                objectInputStream.close();
            }  catch (ClassNotFoundException ex) {
                    Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
            }  catch (FileNotFoundException ex) {
                Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                    Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fileInputStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {
            rootTestingLocation = serverAPI.searchLocationByLocationId(484 + "");;
        }

        fileInput = new File("anh.location");

        if (fileInput.exists()) {
            FileInputStream fileInputStream = null;
            try {
                fileInputStream = new FileInputStream(fileInput);
                BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
                ObjectInputStream objectInputStream;
                objectInputStream = new ObjectInputStream(bufferedInputStream);
                treeRootLocation = (LocationDataObject) objectInputStream.readObject();
                objectInputStream.close();
            }  catch (ClassNotFoundException ex) {
                    Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
            }  catch (FileNotFoundException ex) {
                Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                    Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fileInputStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(LocalizationClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {
            treeRootLocation = serverAPI.searchLocationByLocationId(483 + "");;
        }


        timer = new Timer();

        newDetector();
    }

    private void newDetector() {
        detector = new ClientLocationWifiDetector();

        detector.addNewResultComingEventListener(new NewResultComingEventListener() {

            public void handleEvent(NewResultComingEvent nrce) {

                if (enableTestingjCheckBox.isSelected()) {
                    listResult.add(detector.getListDetectedLocation());
                }

                if (detector.getListDetectedLocation().size() > 0) {
                    iCounter++;
                    resultListenerjLabel.setText("The " + iCounter + "th result coming ");
                    resultListenerjLabel.setVisible(true);
                    resultListenerjLabel.invalidate();

                    ArrayList<Location> listRootLocation = new ArrayList<Location>();
                    for (Location rootLocation : detector.getListDetectedLocation().keySet()) {
                        if (detector.getListDetectedLocation().get(rootLocation).size() > 0
                                && detector.getListDetectedLocation().get(rootLocation).get(0) != null) {
                            listRootLocation.add(rootLocation);
                        }
                    }

                    String selectedRootLocationId = null;
                    if ((Location) rootLocationjComboBox.getSelectedItem() != null) {
                        selectedRootLocationId = ((Location) rootLocationjComboBox.getSelectedItem()).getLocationId();
                    }
                    //treeRootLocation = serverAPI.searchLocationByLocationId(((Location) rootLocationjComboBox.getSelectedItem()).getLocationId());

                    DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel) rootLocationjComboBox.getModel();
                    comboBoxModel.removeAllElements();
                    for (Location location : listRootLocation) {
                        comboBoxModel.addElement(location);
                    }
                    rootLocationjComboBox.invalidate();

                    for (int i = 0; i < comboBoxModel.getSize(); i++) {
                        if (((Location) comboBoxModel.getElementAt(i)).getLocationId().equals(selectedRootLocationId)) {
                            rootLocationjComboBox.setSelectedIndex(i);
                            break;
                        }
                    }
                    //rootLocationjComboBox.setSelectedItem(treeRootLocation);

                    //treeRootLocation = (LocationDataObject) rootLocationjComboBox.getSelectedItem();

                    Location selectedRootLocation = (Location) rootLocationjComboBox.getSelectedItem();
                    if (selectedRootLocation != null) {

                        int size = detector.getListDetectedLocation().get(selectedRootLocation).size();
                        if (detector.getListDetectedLocation().get(selectedRootLocation).get(size - 1) == null) {
                            notCaliratedjLabel.setVisible(true);
                        } else {
                            notCaliratedjLabel.setVisible(false);
                        }

                        Location selectedLocation = detector.getListDetectedLocation().get(selectedRootLocation).get(0);
                        //selectedLocation = serverAPI.searchLocationByLocationId(selectedLocationId);
                        //rootLocation = selectedLocation.getParentLocation();
                        locationNameJLabel.setText(selectedLocation.getLocationName());
                        rootLocationJLabel.setText(selectedRootLocation.getLocationName());
                        userJLabel.setText(selectedLocation.getUserName());
                        System.out.println(selectedLocation.getLocationName());
                        //at here need to save root location. If the root location is not change only not cnhange only need to readloadLocationView
                        //updateView();
                    }

                    //resultListenerjLabel.setVisible(false);
                    //resultListenerjLabel.invalidate();
                }
            }
        });

    }
}
